 {
          marks>80?
          <h1>Brilliant Result</h1>
          :
          <h1>Avarage Result</h1>
        }
         <h1>{2+2}</h1>
         <h1>Hello</h1>
         <h1> {new Date().getTime()} </h1>
         <button style={

          {color:'red'}
         }>Submit</button>

if diye
         {(()=>{
          if(marks>=80 && marks<100){
            return <h1>A+</h1>
          }
          else if(marks>=70 && marks<80){
            return <h1>A</h1>
          }
          else if(marks>=60 && marks<70){
            return <h1>A-</h1>
          }
          else if(marks>=50 && marks<60){
            return <h1>B</h1>
          }
          else if(marks>=40 && marks<50){
            return <h1>B+</h1>
          }
          else{
            return <h1>F</h1>
          }
         })()}

         loop
         <ol>
          {
          city.map((item,i)=>{
            return <li key={i.toString}>{item} </li>
          })
          }
        </ol>

        switch,,,
        const status = false;
 switch(status){
    case true: 
    return <button>Logout</button>
    case false:
      return <button>Login</button>
      default:
        return null;
 }

 tarnari ,,
 {
  status?
  <button>Logout</button>
  :
  <button>Login</button>
 }

  logical and and,,,
  <h1>Login</h1>
     {status && <button>Logout Button</button>}
      

     immediatly invoked function ,,
     <h1>Login Status</h1>
     {(()=>{
        if(status==true){
          return <button>Logout Button</button>
        }
        else{
          return <button>Login Button</button>
        }
     })()}


     props
     const itemObj={
      name:'Romicha',
      age: 20,
      city: 'Rangpur'
     }
      
      return (
        <div>
        <Hero item={itemObj}></Hero>
        </div>
      );
      <ul>
        <li>Name : {props.item['name']} </li>
        <li>Age : {props.item['age']} </li>
        <li>City : {props.item['city']} </li>
      </ul>

      const BtnClick = () =>{
        alert("I am Romicha");
      }
      <button onClick={props.ChildBtn}>Submit</button>
      
      function poor (){
        alert("i am a sudent")
      }
      
       <button onClick={()=> {
        alert("hello word")}}>Submit</button>
        <button onClick={poor}>Click Me</button>

        managing form submit ,,
     const PostFormData =(event) => {
            event.preventDefault(); //ata dile click korle r reload hbe na
            alert("Form Submited")
          }
          <form onSubmit={PostFormData}>
            <input type="text" placeholder='name' />
            <button type='submit'>Submit</button>
          </form>

          useRef,,,
          let myHeadline = useRef();
   

          const change = () => {
            myHeadline.current.innerHTML = "<ul><li>A</li><li>B</li></ul>";
          }
          <h1 ref={myHeadline}></h1>
      <button onClick={change}>Click</button>

      useRef Attribute
      
  let myImg = useRef();

  const click = () => {
    myImg.current.src="https://placehold.co/600x400?text=Hello+World";
    myImg.current.setAttribute("height", '100')
    myImg.current.setAttribute("width", '300')

  }
  <img ref={myImg} src="https://placehold.co/600x400" alt="" />
  <button onClick={ click}>Submit</button>

  useRef input element
  let firstName = useRef();
  let  lastName = useRef();

  const click = () => {
   let fName = firstName.current.value;
   let lName = lastName.current.value;
   alert(fName + "" + lName)
  }
  <input ref={firstName} placeholder='First Name'></input> <br />
       <input ref={lastName} placeholder='Last Name'></input><br></br>
          <button onClick={click}>Submit</button>

          useRef css class
          let myHeadLine = useRef();
  const change = () => {
   myHeadLine.current.classList.remove('text-success');
   myHeadLine.current.classList.add('text-danger')
  }
  <h1 className='text-success' ref={myHeadLine}>This is head line</h1>
         <button onClick={change}>Click</button>

         useRef persisted Mutable //number ak ak kore barano
         let number = useRef(0);

  const change = () => {
     number.current++;
     console.log(number.current)
  }
  <button onClick={change}>Click</button>

  API fetch 
   let APIData = useRef(0);
    let myPTag = useRef();
  const fetchData = async () => {
       const response = await fetch('https://dummyjson.com/products/1');
       APIData.current=await response.json()
  }
   const showdata = () => {
     myPTag.current.innerText =JSON.stringify(APIData.current)
   }
   <p ref={myPTag}></p>
   <button onClick={fetchData}>Call API</button>
   <button onClick={showdata}>Show Data</button>

   useState 1 kore barano
   let [number,setNumber] = useState(11)
   <h1>Number :{number} </h1>
        <button onClick={()=>setNumber( number+1)}>Click</button>

        useState Obj,,,,
        let [myObj,setMyObj] = useState({
          key1 : "value 1",
          key2 : "value 2",
          key3 : "value 3",
          key4 : "value 4",
          key5 : "value 5",
        })
        const change = () => {
          setMyObj(
           prevObj => ({
             ...prevObj,
             key1: "New value For key 1",
             key2: "New value For key 2",
           })
          )
       }
       <h1> {myObj.key1} </h1>
       <h1>{myObj.key2}</h1>
      <button onClick={change}>Click</button>
      
      add item
      const [list,setList] = useState([])
      const [item, setItem] = useState()
      
      const AddToList = () => {
        list.push(item)
        setList([...list])
      }
      <h1>{list.length} </h1>
      <p>{item} </p>
      <input onChange={(e) => setItem(e.target.value)} placeholder='Item' />
        <button onClick={AddToList}>Add</button>


        item add and remove
        const [list, setList] = useState([]);
  const [item, setItem] = useState("")

 const addToList = () => {
  list.push(item)
  setList ([...list])
 }

 const RemoveItem = (index) =>{
     list.splice(index,1)
     setList([...list])
 }
 <table>
  <tbody>
   {
     list.length!==0?(
      list.map((element,index) => {
       return(
          <tr>
           <td> {element}</td>
           <td><button onClick={()=>{
             RemoveItem(index)
           }}>Remove</button></td>
          </tr>
       )
      })
     ):(<tr></tr>)
     }
  </tbody>
</table>
<input onChange={(e) => setItem(e.target.value)} placeholder='item'/>
<button onClick={addToList}>Add</button>

form//
let [FromObj,setFormObj] = useState({fName:"", lName:"",city:"", gender:""})

const inputOnChange = (property,value) => {
   setFormObj(prevObj =>({
         ...prevObj,
         [property]:value
   }))
 

}

const formSubmit = (e) => {
      e.preventDefault();
      console.log(FromObj)
}
  
  return (
    <div>
      <div className='container'>

         <form onSubmit={formSubmit}>
          <input onChange={(e) =>{inputOnChange("fName", e.target.value)}} value={FromObj.fName} placeholder='First Name' /><br></br>
          <input onChange={(e) =>{inputOnChange("lName", e.target.value)}} value={FromObj.lName} placeholder='Last Name' /><br />
          <select onChange={(e) =>{inputOnChange("city", e.target.value)}} value={FromObj.city}>
            <option value="">Choose City</option>
            <option value="Dhaka">Dhaka</option>
            <option value="Rangpur">Rangpur</option>
          </select>
          <br />
          <input onChange={(e) =>{inputOnChange("gender",'Male')}} checked={FromObj.gender==="Male"} type="radio" name='gender' />Male
          <input onChange={(e) =>{inputOnChange("gender", 'Female')}} checked={FromObj.gender==="Female"} type="radio" name='gender' />Female
          <br />
          <button type='submit'>Submit</button>
         </form>
      </div>
         
    </div>
              )
              }

              APi fetch//
              function App ()  {
              let [data,setData] = useState()
              useEffect(()=>{
                ( async ()=> {
            
                   let response = await fetch('https://dummyjson.com/products/1')
                  let json = await response.json()
                  setData(json)
                })
                 
              },[])
            
              return (
                <div>
            
                     {JSON.stringify(data)}
                    
                </div>
                          )
                          }

     ak page theke onno page a niye jabe
     <BrowserRouter>
      <Routes>
      <Route path='/' element={<HomePage></HomePage>}></Route>
      <Route path='/product' element={<ProductPage></ProductPage>}></Route>
       <Route path='/profile' element={<ProfilePage/>}></Route>
       <Route path='/notfound' element={<NotFoundPage></NotFoundPage>}></Route>
      </Routes>
     </BrowserRouter>   
     
     active onno color pending onno color hbe
     import React from 'react'
import { Link, NavLink } from 'react-router-dom'

const Menu = () => {
  return (
    <div>
        <ul>
            <li><NavLink className={({isActive})=> isActive? "active-item" : "pending-item"} to="/">Home</NavLink></li>
            <li><NavLink className={({isActive})=>isActive? "active-item": "pending-item"} to="/product">Product</NavLink></li>
            <li><NavLink className={({isActive})=>isActive? "active-item": "pending-item"} to="/profile">Profile</NavLink></li>
        </ul>
    </div>
  )
}

export default Menu

useParams// ata use kore amra cach korte parbo 
